#!/bin/bash

##############################################
# Installation du Git Hook d'optimisation
# Red Den Connexion - Configuration automatique
##############################################

echo "üîß Installation du Git Hook d'optimisation automatique"
echo "======================================================="
echo ""

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# V√©rifier qu'on est dans un repo git
if [ ! -d ".git" ]; then
    echo -e "${RED}‚ùå Erreur: Pas dans un d√©p√¥t Git${NC}"
    echo "Ex√©cutez ce script depuis la racine de votre projet Git"
    exit 1
fi

# V√©rifier si ImageMagick est install√©
echo -e "${BLUE}üîç V√©rification des d√©pendances...${NC}"
echo ""

MISSING_DEPS=0

if ! command -v convert &> /dev/null; then
    echo -e "${RED}‚ùå ImageMagick n'est pas install√©${NC}"
    MISSING_DEPS=1
else
    echo -e "${GREEN}‚úÖ ImageMagick install√©${NC}"
fi

if ! command -v optipng &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  optipng n'est pas install√© (optionnel mais recommand√©)${NC}"
else
    echo -e "${GREEN}‚úÖ optipng install√©${NC}"
fi

echo ""

if [ $MISSING_DEPS -eq 1 ]; then
    echo -e "${YELLOW}üì¶ Installation des d√©pendances n√©cessaires:${NC}"
    echo ""
    echo "Ubuntu/Debian:"
    echo "  sudo apt update"
    echo "  sudo apt install imagemagick optipng"
    echo ""
    echo "macOS:"
    echo "  brew install imagemagick optipng"
    echo ""
    read -p "Voulez-vous continuer quand m√™me ? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
    echo ""
fi

# Cr√©er le dossier hooks s'il n'existe pas
if [ ! -d ".git/hooks" ]; then
    mkdir -p .git/hooks
    echo -e "${BLUE}üìÅ Cr√©ation du dossier .git/hooks${NC}"
fi

# Copier le hook pre-commit
HOOK_SOURCE="git-hooks/pre-commit-optimize-images"
HOOK_DEST=".git/hooks/pre-commit"

# V√©rifier que le fichier source existe
if [ ! -f "$HOOK_SOURCE" ]; then
    echo -e "${RED}‚ùå Erreur: Fichier source du hook introuvable${NC}"
    echo "   Attendu: $HOOK_SOURCE"
    exit 1
fi

# Copier depuis le fichier source
cp "$HOOK_SOURCE" "$HOOK_DEST"
echo -e "${GREEN}‚úÖ Hook pre-commit copi√© depuis $HOOK_SOURCE${NC}"

# Rendre le hook ex√©cutable
chmod +x "$HOOK_DEST"
echo -e "${GREEN}‚úÖ Hook pre-commit rendu ex√©cutable${NC}"
echo ""

# V√©rifier l'installation
if [ -x "$HOOK_DEST" ]; then
    echo -e "${GREEN}‚ú® Installation r√©ussie !${NC}"
    echo ""
    echo -e "${BLUE}=================================================${NC}"
    echo -e "${BLUE}üéâ Git Hook activ√© avec succ√®s !${NC}"
    echo -e "${BLUE}=================================================${NC}"
    echo ""
    echo "üìã Fonctionnement:"
    echo "   ‚Üí Chaque fois que vous faites 'git commit'"
    echo "   ‚Üí Le hook d√©tecte automatiquement les images JPG/PNG"
    echo "   ‚Üí Les compresse avant de les committer"
    echo "   ‚Üí Affiche le gain de poids"
    echo ""
    echo "üí° Exemples:"
    echo "   git add nouvelle-image.jpg"
    echo "   git commit -m 'Ajout image'"
    echo "   ‚Üí L'image sera automatiquement optimis√©e ‚ú®"
    echo ""
    echo "‚ö†Ô∏è  Pour bypasser l'optimisation (d√©conseill√©):"
    echo "   git commit --no-verify -m 'Message'"
    echo ""
    echo "üîç Tester le hook maintenant:"
    echo "   1. Ajoutez une image: cp une-image.jpg test.jpg"
    echo "   2. Stagez-la: git add test.jpg"
    echo "   3. Committez: git commit -m 'Test'"
    echo "   ‚Üí Le hook devrait optimiser test.jpg automatiquement"
    echo ""
else
    echo -e "${RED}‚ùå Erreur lors de l'installation${NC}"
    exit 1
fi
